// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("USER") // USER veya ADMIN
  address   String?
  books     Book[]   @relation("UserBooks")
  rentals   Rental[]
  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  imageUrl    String?
  pricePerDay Float
  ownerId     Int
  owner       User     @relation("UserBooks", fields: [ownerId], references: [id])
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  rentals     Rental[]
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isBookOfTheWeek Boolean @default(false)
}

model Rental {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  bookId    Int
  book      Book     @relation(fields: [bookId], references: [id])
  startDate DateTime
  endDate   DateTime
  totalPrice Float
  createdAt DateTime @default(now())
}

model Message {
  id        Int      @id @default(autoincrement())
  senderId  Int
  receiverId Int
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      // 1-5 yıldız
  comment   String?  // Opsiyonel yorum
  userId    Int
  bookId    Int
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bookId]) // Bir kullanıcı bir kitap için sadece bir değerlendirme yapabilir
}
